/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContentObservation struct {

	// The body of the new content.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The space that the content is being created in.
	Space *string `json:"space,omitempty" tf:"space,omitempty"`

	// Defines the document title.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The type of the new content. Custom content types defined by apps are also supported. eg. 'page', 'blogpost', 'comment' etc.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ContentParameters struct {

	// The body of the new content.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// The space that the content is being created in.
	// +kubebuilder:validation:Optional
	Space *string `json:"space,omitempty" tf:"space,omitempty"`

	// Defines the document title.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// The type of the new content. Custom content types defined by apps are also supported. eg. 'page', 'blogpost', 'comment' etc.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ContentSpec defines the desired state of Content
type ContentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContentParameters `json:"forProvider"`
}

// ContentStatus defines the observed state of Content.
type ContentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Content is the Schema for the Contents API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,confluence}
type Content struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.body)",message="body is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.space)",message="space is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.title)",message="title is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   ContentSpec   `json:"spec"`
	Status ContentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContentList contains a list of Contents
type ContentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Content `json:"items"`
}

// Repository type metadata.
var (
	Content_Kind             = "Content"
	Content_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Content_Kind}.String()
	Content_KindAPIVersion   = Content_Kind + "." + CRDGroupVersion.String()
	Content_GroupVersionKind = CRDGroupVersion.WithKind(Content_Kind)
)

func init() {
	SchemeBuilder.Register(&Content{}, &ContentList{})
}
